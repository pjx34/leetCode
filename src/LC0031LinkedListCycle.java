import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

//给定一个链表，判断链表中是否有环。
//
//        如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。
//
//        如果链表中存在环，则返回 true 。 否则，返回 false 。
//        。
public class LC0031LinkedListCycle {

    //使用hashSet记录已经遍历过的节点
    public boolean hasCycle1(ListNode head) {
        Set set = new HashSet<ListNode>();
        while (head!=null){
            if (set.add(head) == false){
                return true;
            }
            head = head.next;
        }
        return false;
    }

    //龟兔赛跑 快慢指针
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next==null)
            return false;
        ListNode slow = head;
        ListNode fast = head;
        while (slow != fast) {
            if (fast == null || fast.next==null)
                return false;
            fast = head.next.next;
            slow = slow.next;
        }
        return true;
    }
}
